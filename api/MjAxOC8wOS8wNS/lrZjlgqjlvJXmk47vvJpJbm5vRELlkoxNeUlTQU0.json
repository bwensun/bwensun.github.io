{"title":"存储引擎:InnoDB和MyISAM","date":"2018-09-05T14:15:05.000Z","date_formatted":{"ll":"Sep 5, 2018","L":"09/05/2018","MM-DD":"09-05"},"link":"2018/09/05/存储引擎：InnoDB和MyISAM","tags":["Mysql","存储引擎"],"categories":["数据库"],"updated":"2018-09-05T16:37:18.276Z","content":"<h4 id=\"前言\">前言<a href=\"#前言\" title=\"前言\"></a></h4><p>看<code>高性能MySQL</code>有些疑问，查阅记录下来。</p>\n<a id=\"more\"></a><h4 id=\"innodb存储引擎\">InnoDB存储引擎<a href=\"#innodb存储引擎\" title=\"InnoDB存储引擎\"></a></h4><h5 id=\"历史\">历史<a href=\"#历史\" title=\"历史\"></a></h5><p>早在<code>MySQL5.1</code>时，InnoDB是作为一个插件来扩展MySQL的功能的，MySQL内部依旧是用的老版本的InnoDB,原因是因为其版权是归有Oracle所有（当时sun还没有被收购），后来sun被收购以后版本的MySQL也就是5.5以后，都是使用的InnoDB来作为默认的存储引擎，现在大多企业用的都是MySQL5.7版本，扩展了更多的新特性。</p>\n<h5 id=\"概览\">概览<a href=\"#概览\" title=\"概览\"></a></h5><p>InnoDB数据存储在表空间，有一系列数据文件组成。</p>\n<p>InnoDB以<code>MVCC</code>来支持高并发，实现了是个数据隔离级别，默认隔离级别是可重复读，需要注意的是它通过<code>间隙锁</code>来防止出现的幻读现象，间隙锁不仅仅锁定查询时的行，还对索引中的间隙进行锁定。</p>\n<p>InnoDB做了很多优化，其中的表是基于聚簇索引建立的，对主键查询具有很高的性能，它可以自动的创建自适应哈希索引，关于它的索引以后再介绍。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MVCC（多版本并发控制）：</span><br><span class=\"line\">    InnoDB事务的实现不仅仅是行级锁，也通过MVCC实现了非阻塞的读操作，</span><br><span class=\"line\">    正常情况下当已存在数据的写入时，读操作涉及到相关行时会被阻塞的，</span><br><span class=\"line\">    但是通过MVCC让读操作依旧可以读取到正确的数据。</span><br><span class=\"line\">可重复读的实现：</span><br><span class=\"line\">    通过在每行记录后添加两个隐藏的列，分别是行的行版本号，</span><br><span class=\"line\">    和行的删除版本号，只要增删改查满足一定的规则，</span><br><span class=\"line\">    那么大部分的查询操作都没有必要加锁。</span><br><span class=\"line\">规则：</span><br><span class=\"line\">\tselect：</span><br><span class=\"line\">\t\t1. 只查询行的行版本号小于或者等于当前事务版本号</span><br><span class=\"line\">\t\t2. 行的删除版本号要么未定义，要么大于当前事务版本号</span><br><span class=\"line\">\tinsert:</span><br><span class=\"line\">\t\t1. 插入的每一行都保存当前事务版本号为行版本号</span><br><span class=\"line\">\tdelete:</span><br><span class=\"line\">\t\t1. 删除的每一行都保存当前事务版本号为行的删除版本号</span><br><span class=\"line\">\tupdate:</span><br><span class=\"line\">\t\t1. 保存当前事务版本号为行的型版本号和删除版本号</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">间隙锁：</span><br><span class=\"line\">    当使用范围条件检索数据，或者相等条件的一个不存在记录，</span><br><span class=\"line\">    InnoDB会将范围内所有数据加锁。这样做一方面是为了防止幻读</span><br><span class=\"line\">    （比如查询年龄大于20，那么之后有数据插入年龄大于20会直接失败），</span><br><span class=\"line\">    另一方面为了恢复和复制数据（因为MySQL时按照BINLOG中的SQL和</span><br><span class=\"line\">    事务的提交顺序来恢复的，Oracle是以数据块和系统更新号SCN来恢复的；）。</span><br></pre></td></tr></table></figure><h4 id=\"myisam存储引擎\">MyISAM存储引擎<a href=\"#myisam存储引擎\" title=\"MyISAM存储引擎\"></a></h4><h5 id=\"存储\">存储<a href=\"#存储\" title=\"存储\"></a></h5><p>MyISAM是MySQL5.1和之前的默认存储引擎，将表存储在两个文件中：数据文件和索引文件，分别以.MYD和.MYI为扩展名，它可以压缩表，但是被压缩的表是无法被修改的，但是可以解压缩。</p>\n<h5 id=\"特性\">特性<a href=\"#特性\" title=\"特性\"></a></h5><ul><li>加锁是对整张表加锁，不支持行级锁</li>\n<li>不支持事务，崩溃后修复可能会丢失数据，因为没有MVCC</li>\n<li>支持全文索引，可以延迟更新索引键</li>\n</ul><h4 id=\"相关\">相关<a href=\"#相关\" title=\"相关\"></a></h4><ol><li><a href=\"https://blog.csdn.net/mysteryhaohao/article/details/51669741\" target=\"_blank\">MySQL学习之——锁(行锁、表锁、页锁、乐观锁、悲观锁等)</a></li>\n<li>高性能MySQL</li>\n</ol>","prev":{"title":"Nexus搭建maven私服","link":"2018/10/25/Nexus搭建maven私服"},"next":{"title":"HashMap实现原理","link":"2018/08/28/HashMap实现原理"},"plink":"http://yoursite.com/2018/09/05/存储引擎：InnoDB和MyISAM/"}