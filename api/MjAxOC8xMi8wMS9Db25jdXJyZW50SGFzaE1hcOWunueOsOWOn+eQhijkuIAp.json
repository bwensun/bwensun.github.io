{"title":"ConcurrentHashMap实现原理（一）","date":"2018-12-01T14:04:53.000Z","date_formatted":{"ll":"Dec 1, 2018","L":"12/01/2018","MM-DD":"12-01"},"link":"2018/12/01/ConcurrentHashMap实现原理(一)","tags":["ConcurrentHashMap"],"categories":["基础"],"updated":"2019-02-23T08:17:24.888Z","content":"<h4 id=\"前言\">前言<a href=\"#前言\" title=\"前言\"></a></h4><p>最近闲下来，接着把自己所理解的一些内容做个整理，接着上次的HashMap继续看ConcurrentHashMap的源码，探究下其实现原理，源码用的JDK1.8版本。</p>\n<a id=\"more\"></a><p>ConcurrentHashMap和HashMap区别在于ConcurrentHashMap是线程安全的，它内部维护了多个Segment，各个Segment内部包含了Node节点，也就是键值对的集合，对外部来说，并发读写只会阻塞某个Segment而不会影响到其他，兼顾了线程安全和访问速度。</p>\n<h4 id=\"初始化\">初始化<a href=\"#初始化\" title=\"初始化\"></a></h4><p>ConcurrentHashMap的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">//initialCapacity 初始容量，不指定默认为16，相当于Node节点的初始化数组长度</span></span><br><span class=\"line\"><span class=\"comment\">//loadFactor 负载因子，不指定默认为0.75，达到initialCapacity * loadFactor 会触发扩容</span></span><br><span class=\"line\"><span class=\"comment\">//concurrencyLevel 并发级别，不指定默认为1，</span></span><br><span class=\"line\"><span class=\"comment\">//private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span></span><br><span class=\"line\"><span class=\"comment\">//若大于最大值则为最大值，若不为2的幂就转变为大于入参的最小2的幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class=\"number\">1</span>)) ?</span><br><span class=\"line\">                  MAXIMUM_CAPACITY :</span><br><span class=\"line\">                  tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>));</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.sizeCtl = cap;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>(initialCapacity, loadFactor, <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">float</span> loadFactor, <span class=\"keyword\">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!(loadFactor &gt; <span class=\"number\">0.0f</span>) || initialCapacity &lt; <span class=\"number\">0</span> || concurrencyLevel &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &lt; concurrencyLevel)   <span class=\"comment\">// Use at least as many bins</span></span><br><span class=\"line\">           initialCapacity = concurrencyLevel;   <span class=\"comment\">// as estimated threads</span></span><br><span class=\"line\">       <span class=\"keyword\">long</span> size = (<span class=\"keyword\">long</span>)(<span class=\"number\">1.0</span> + (<span class=\"keyword\">long</span>)initialCapacity / loadFactor);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> cap = (size &gt;= (<span class=\"keyword\">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class=\"line\">           MAXIMUM_CAPACITY : tableSizeFor((<span class=\"keyword\">int</span>)size);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.sizeCtl = cap;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><p>sizeCtl：控制标识符，</p>\n<ul><li><p>负数代表正在进行初始化或扩容操作</p>\n</li>\n<li><p>-1代表正在初始化或扩容</p>\n</li>\n<li><p>-N 表示有N-1个线程正在进行扩容操作</p>\n</li>\n<li><p>正数或0代表hash表还没有被初始化，初始化完毕后代表扩容阈值。还后面可以看到，它的值始终是当前ConcurrentHashMap容量的0.75倍，这与loadfactor是对应的</p>\n</li>\n</ul><p>Segment:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Segment</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">2249069246763182397L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\">    Segment(<span class=\"keyword\">float</span> lf) &#123; <span class=\"keyword\">this</span>.loadFactor = lf; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> V val;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>       </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span>     </span>&#123; <span class=\"keyword\">return</span> val; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span>   </span>&#123; <span class=\"keyword\">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + val; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((o <span class=\"keyword\">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class=\"line\">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (v = e.getValue()) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (k == key || k.equals(key)) &amp;&amp;</span><br><span class=\"line\">                (v == (u = val) || v.equals(u)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Virtualized support for map.get(); overridden in subclasses.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                K ek;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == h &amp;&amp;</span><br><span class=\"line\">                    ((ek = e.key) == k || (ek != <span class=\"keyword\">null</span> &amp;&amp; k.equals(ek))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"put过程\">PUT过程<a href=\"#put过程\" title=\"PUT过程\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Implementation for put and putIfAbsent */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;;++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先判定key，value是否有null值，有则抛出异常</p>\n</li>\n<li><p>获取key的hashcode值暂记为hashcode,计算hashcode异或运算hashcode无符号右移16位后在和HASH_BIT与运算，获取hash值，0x7fffffff为最大的INT数值，相当2^31-1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HASH_BITS = <span class=\"number\">0x7fffffff</span>; <span class=\"comment\">// usable bits of normal node hash</span></span><br></pre></td></tr></table></figure></li>\n<li><p>判定Node节点数组table是否存在，不存在则初始化table</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p> 初始化过程</p>\n<ol><li>sizeCtl是状态标识，小于零代表已有线程正在进行初始化操作，其他线程进入阻塞状态，第二次判断，这里使用的是CAS来保证线程安全</li>\n<li>初始化容量小于0，修正为默认容量，最后计算的出sizeCtl新的阈值</li>\n</ol></li>\n<li><p>判断是否是第一次插入，是就通过CAS来直接替换内存中的值</p>\n<ol><li><p>前面了解了HashMap的可以知道(n - 1) &amp; hash就是table中的索引值（在hashMap里面解释了原因），这里还有个原因为什么使用Unsafe中的getObjectVolatile方法，不直接通过索引来获取呢？原因是getObjectVolatile获取的是内存中的最新的值，而用索引获取哪怕是用了volite关键字修饰,但是线程中储存的一直是副本值，依旧存在旧值的可能。</p>\n</li>\n<li><pre><code class=\"java\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>{\n    <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);\n}\n&lt;!--￼<span class=\"number\">7</span>--&gt;</code></pre>\n</li>\n<li><p>确认第一次插入的情况下，CAS执行更新</p>\n</li>\n</ol></li>\n<li><p>第三种情况，当table的hash值为一个特殊值<code>MOVED</code>,表示当前哈希表正在执行resizing操作，需要当前线程去帮组做resizing操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] nextTab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab != <span class=\"keyword\">null</span> &amp;&amp; (f <span class=\"keyword\">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class=\"line\">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = resizeStamp(tab.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class=\"line\">               (sc = sizeCtl) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                transfer(tab, nextTab);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextTab;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">resizeStamp</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integer.numberOfLeadingZeros(n) | (<span class=\"number\">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>  <code>ForwardingNode</code>—— A node inserted at head of bins during transfer operations.他是在扩容操作中的一个插入在桶头部的特殊节点，他的含义表明，这个桶已经完成了扩容操作，但是整个哈希表扩容操作还没有结束，如果检测到这种节点，当前线程会被要求一起来完成<strong>部分扩容操作</strong>      </p>\n<ol><li><p>首先检测是否存在<code>ForwardingNode</code></p>\n</li>\n<li><p>resizeStamp(tab.length) 获取一个16位的扩容标识，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = tab.length, stride;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"keyword\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextn = nextTab.length;</span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> finishing = <span class=\"keyword\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> fh;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt</span><br><span class=\"line\">                     (<span class=\"keyword\">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class=\"line\">                      nextBound = (nextIndex &gt; stride ?</span><br><span class=\"line\">                                   nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;</span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123;</span><br><span class=\"line\">                nextTable = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                table = nextTab;</span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                finishing = advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                i = n; <span class=\"comment\">// recheck before commit</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"keyword\">null</span>, fwd);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            advance = <span class=\"keyword\">true</span>; <span class=\"comment\">// already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> runBit = fh &amp; n;</span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"keyword\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> b = p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b;</span><br><span class=\"line\">                                lastRun = p;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun;</span><br><span class=\"line\">                            ln = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> lc = <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> h = e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> TreeNode&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol></li>\n</ol><ol><li><p>第四种情况，通常情况的一般处理</p>\n<ol><li>先对table进行加锁处理，再次确认值未被修改</li>\n<li>判断fh（table的hash值）大于0标识，该table为链表结构，key值相等则替换，onlyIfAbsent只有缺失才替换，这里也用到了&amp;&amp;的短路特性</li>\n<li>当fh（table的hash值）不大于0,判断是否为树形结构，1.8在多数据的时候会转变为红黑树，替换对应的value值即可</li>\n<li>最后链表插入完成后会再次检测插入数量是否超过 8个时，是则会转化成红黑树结构存储</li>\n</ol></li>\n</ol><p>相关：</p>\n<ol><li><a href=\"https://www.jianshu.com/p/514e33ad6c35\" target=\"_blank\"><strong>java8—ConcurrentHashMap实现原理</strong></a></li>\n<li><a href=\"https://javadoop.com/post/hashmap\" target=\"_blank\"><strong>Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析</strong></a></li>\n</ol>","prev":{"title":"ConcurrentHashMap实现原理（二）","link":"2018/12/03/ConcurrentHashMap实现原理(二)"},"next":{"title":"记七牛云回收测试域名导致博客图片丢失","link":"2018/11/26/记七牛云回收测试域名导致博客图片丢失"},"plink":"http://yoursite.com/2018/12/01/ConcurrentHashMap实现原理(一)/"}